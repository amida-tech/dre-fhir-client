// Generated by CoffeeScript 1.9.1
var cache, conf, crud, document, fhir, history, merge, resolve, search, tags, transaction, utils, wrap;

search = require("./search");

conf = require("./conformance");

document = require("./document");

transaction = require("./transaction");

tags = require("./tags");

history = require("./history");

crud = require("./resource");

wrap = require("./wrap");

utils = require("./utils");

resolve = require('./resolve');

merge = require('merge');

cache = {};

fhir = function(cfg, adapter) {
  var baseUrl, deps, depsWithCache, http, middlewares;
  middlewares = cfg.middlewares || {};
  http = wrap(cfg, adapter.http, middlewares.http);
  baseUrl = cfg.baseUrl;
  deps = function(opt) {
    return merge(true, opt, {
      baseUrl: baseUrl,
      http: http
    });
  };
  depsWithCache = function(opt) {
    return merge(true, opt, {
      baseUrl: baseUrl,
      http: http,
      cache: cfg.cache && cache[baseUrl]
    });
  };
  return {
    search: function(opt) {
      var wrapped;
      wrapped = wrap(cfg, search.search, middlewares.search);
      return wrapped(merge(true, opt, {
        baseUrl: baseUrl,
        http: http
      }));
    },
    nextPage: function(opt) {
      return search.next(deps(opt));
    },
    prevPage: function(opt) {
      return search.prev(deps(opt));
    },
    conformance: function(opt) {
      return conf.conformance(deps(opt));
    },
    document: function(opt) {
      return conf.document(deps(opt));
    },
    profile: function(opt) {
      return conf.profile(deps(opt));
    },
    transaction: function(opt) {
      return transaction(deps(opt));
    },
    history: function(opt) {
      return history(deps(opt));
    },
    create: function(opt) {
      return crud.create(deps(opt));
    },
    validate: function(opt) {
      return crud.validate(deps(opt));
    },
    read: function(opt) {
      return crud.read(deps(opt));
    },
    update: function(opt) {
      return crud.update(deps(opt));
    },
    "delete": function(opt) {
      return crud["delete"](deps(opt));
    },
    tags: function(opt) {
      return tags.tags(deps(opt));
    },
    affixTags: function(opt) {
      return tags.affixTags(deps(opt));
    },
    removeTags: function(opt) {
      return tags.removeTags(deps(opt));
    },
    resolve: function(opt) {
      return resolve.async(depsWithCache(opt));
    },
    resolveSync: function(opt) {
      return resolve.sync(depsWithCache(opt));
    }
  };
};

module.exports = fhir;
