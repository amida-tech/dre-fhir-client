// Generated by CoffeeScript 1.9.1
var affixTags, affixTagsToResource, affixTagsToResourceVersion, buildTags, removeTags, removeTagsFromResource, removeTagsFromResourceVersion, tags, tagsAll, tagsResource, tagsResourceType, tagsResourceVersion;

tagsAll = function(arg) {
  var baseUrl, error, http, success;
  baseUrl = arg.baseUrl, http = arg.http, success = arg.success, error = arg.error;
  return http({
    method: 'GET',
    url: baseUrl + "/_tags",
    success: success,
    error: error
  });
};

tagsResourceType = function(arg) {
  var baseUrl, error, http, success, type;
  baseUrl = arg.baseUrl, http = arg.http, type = arg.type, success = arg.success, error = arg.error;
  return http({
    method: 'GET',
    url: baseUrl + "/" + type + "/_tags",
    success: success,
    error: error
  });
};

tagsResource = function(arg) {
  var baseUrl, error, http, id, success, type;
  baseUrl = arg.baseUrl, http = arg.http, type = arg.type, id = arg.id, success = arg.success, error = arg.error;
  return http({
    method: 'GET',
    url: baseUrl + "/" + type + "/" + id + "/_tags",
    success: success,
    error: error
  });
};

tagsResourceVersion = function(arg) {
  var baseUrl, error, http, id, success, type, vid;
  baseUrl = arg.baseUrl, http = arg.http, type = arg.type, id = arg.id, vid = arg.vid, success = arg.success, error = arg.error;
  return http({
    method: 'GET',
    url: baseUrl + "/" + type + "/" + id + "/_history/" + vid + "/_tags",
    success: success,
    error: error
  });
};

tags = function(q) {
  if ((q.vid != null) && (q.id != null) && (q.type != null)) {
    return tagsResourceVersion(q);
  } else if ((q.id != null) && (q.type != null)) {
    return tagsResource(q);
  } else if (q.type != null) {
    return tagsResourceType(q);
  } else {
    return tagsAll(q);
  }
};

buildTags = function(tags) {
  return tags.filter(function(i) {
    return $.trim(i.term);
  }).map(function(i) {
    return i.term + "; scheme=\"" + i.scheme + "\"; label=\"" + i.label + "\"";
  }).join(",");
};

affixTagsToResource = function(arg) {
  var baseUrl, error, headers, http, id, success, tagHeader, tags, type;
  baseUrl = arg.baseUrl, http = arg.http, type = arg.type, id = arg.id, tags = arg.tags, success = arg.success, error = arg.error;
  headers = {};
  tagHeader = buildTags(tags);
  if (tagHeader) {
    headers["Category"] = tagHeader;
    return http({
      method: 'POST',
      url: baseUrl + "/" + type + "/" + id + "/_tags",
      headers: headers,
      success: success,
      error: error
    });
  } else {
    return console.log('Empty tags');
  }
};

affixTagsToResourceVersion = function(arg) {
  var baseUrl, error, headers, http, id, success, tagHeader, tags, type, vid;
  baseUrl = arg.baseUrl, http = arg.http, type = arg.type, id = arg.id, vid = arg.vid, tags = arg.tags, success = arg.success, error = arg.error;
  headers = {};
  tagHeader = buildTags(tags);
  if (tagHeader) {
    headers["Category"] = tagHeader;
    return http({
      method: 'POST',
      url: baseUrl + "/" + type + "/" + id + "/_history/" + vid + "/_tags",
      headers: headers,
      success: success,
      error: error
    });
  } else {
    return console.log('Empty tags');
  }
};

affixTags = function(q) {
  if ((q.vid != null) && (q.id != null) && (q.type != null)) {
    return affixTagsToResourceVersion(q);
  } else if ((q.id != null) && (q.type != null)) {
    return affixTagsToResource(q);
  } else {
    throw 'wrong arguments';
  }
};

removeTagsFromResource = function(arg) {
  var baseUrl, error, http, id, success, type;
  baseUrl = arg.baseUrl, http = arg.http, type = arg.type, id = arg.id, success = arg.success, error = arg.error;
  return http({
    method: 'POST',
    url: baseUrl + "/" + type + "/" + id + "/_tags/_delete",
    success: success,
    error: error
  });
};

removeTagsFromResourceVersion = function(arg) {
  var baseUrl, error, http, id, success, type, vid;
  baseUrl = arg.baseUrl, http = arg.http, type = arg.type, id = arg.id, vid = arg.vid, success = arg.success, error = arg.error;
  return http({
    method: 'POST',
    url: baseUrl + "/" + type + "/" + id + "/_history/" + vid + "/_tags",
    success: success,
    error: error
  });
};

removeTags = function(q) {
  if ((q.vid != null) && (q.id != null) && (q.type != null)) {
    return removeTagsFromResourceVersion(q);
  } else if ((q.id != null) && (q.type != null)) {
    return removeTagsFromResource(q);
  } else {
    throw 'wrong arguments';
  }
};

exports.tags = tags;

exports.affixTags = affixTags;

exports.removeTags = removeTags;
