// Generated by CoffeeScript 1.9.1
var CONTAINED, async, resolveContained, sync, utils;

utils = require('./utils');

CONTAINED = /^#(.*)/;

resolveContained = function(ref, resource) {
  var cid, match, r, ret;
  cid = ref.match(CONTAINED)[1];
  match = (function() {
    var i, len, ref1, results;
    ref1 = resource != null ? resource.contained : void 0;
    results = [];
    for (i = 0, len = ref1.length; i < len; i++) {
      r = ref1[i];
      if ((r.id || r._id) === cid) {
        results.push(r);
      }
    }
    return results;
  })();
  ret = match[0] || null;
  if (ret) {
    return {
      content: ret
    };
  } else {
    return null;
  }
};

sync = function(arg) {
  var abs, baseUrl, bundle, bundled, cache, e, http, ref, reference, resource;
  baseUrl = arg.baseUrl, http = arg.http, cache = arg.cache, reference = arg.reference, resource = arg.resource, bundle = arg.bundle;
  ref = reference;
  if (!ref.reference) {
    return null;
  }
  if (ref.reference.match(CONTAINED)) {
    return resolveContained(ref.reference, resource);
  }
  abs = utils.absoluteUrl(baseUrl, ref.reference);
  bundled = (function() {
    var i, len, ref1, results;
    ref1 = (bundle != null ? bundle.entry : void 0) || [];
    results = [];
    for (i = 0, len = ref1.length; i < len; i++) {
      e = ref1[i];
      if (e.id === abs) {
        results.push(e);
      }
    }
    return results;
  })();
  return bundled[0] || (cache != null ? cache[abs] : void 0) || null;
};

async = function(opt) {
  var abs, baseUrl, bundle, cache, didSync, error, http, ref, reference, resource, success;
  baseUrl = opt.baseUrl, http = opt.http, cache = opt.cache, reference = opt.reference, resource = opt.resource, bundle = opt.bundle, success = opt.success, error = opt.error;
  ref = reference;
  didSync = sync(opt);
  if (didSync) {
    return setTimeout(function() {
      if (success) {
        return success(didSync);
      }
    });
  }
  if (!ref.reference) {
    return setTimeout(function() {
      if (error) {
        return error("No reference found");
      }
    });
  }
  if (ref.reference.match(CONTAINED)) {
    return setTimeout(function() {
      if (error) {
        return error("Contained resource not found");
      }
    });
  }
  abs = utils.absoluteUrl(baseUrl, ref.reference);
  return http({
    method: 'GET',
    url: abs,
    success: function(data) {
      if (success) {
        return success(data);
      }
    },
    error: function(e) {
      if (error) {
        return error(e);
      }
    }
  });
};

module.exports.async = async;

module.exports.sync = sync;
