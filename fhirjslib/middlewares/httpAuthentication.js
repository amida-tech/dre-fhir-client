// Generated by CoffeeScript 1.9.1
var basic, bearer, btoa, identity, merge, withAuth, wrapWithAuth;

btoa = require('Base64').btoa;

merge = require('merge');

bearer = function(cfg) {
  return function(req) {
    return withAuth(req, "Bearer " + cfg.auth.bearer);
  };
};

basic = function(cfg) {
  return function(req) {
    return withAuth(req, "Basic " + btoa(cfg.auth.user + ":" + cfg.auth.pass));
  };
};

identity = function(x) {
  return x;
};

withAuth = function(req, a) {
  var headers;
  headers = merge(true, req.headers || {}, {
    "Authorization": a
  });
  return merge(true, req, {
    headers: headers
  });
};

wrapWithAuth = function(cfg, http) {
  var requestProcessor;
  requestProcessor = (function() {
    var ref, ref1, ref2;
    switch (false) {
      case !(cfg != null ? (ref = cfg.auth) != null ? ref.bearer : void 0 : void 0):
        return bearer(cfg);
      case !((cfg != null ? (ref1 = cfg.auth) != null ? ref1.user : void 0 : void 0) && (cfg != null ? (ref2 = cfg.auth) != null ? ref2.pass : void 0 : void 0)):
        return basic(cfg);
      default:
        return identity;
    }
  })();
  return function(req) {
    return http(requestProcessor(req));
  };
};

module.exports = wrapWithAuth;
