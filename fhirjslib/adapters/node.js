// Generated by CoffeeScript 1.9.1
var adapter, auth, merge, mkFhir, request, searchByPatient, utils, wrappToErrbackForm;

request = require('request');

mkFhir = require('../fhir');

merge = require('merge');

utils = require('../utils');

auth = require('../middlewares/httpAuthentication');

searchByPatient = require('../middlewares/searchByPatient');

merge = require('merge');

adapter = {
  http: function(q) {
    q = merge(true, q);
    q.headers = q.headers || {};
    q.headers["Accept"] = "application/json";
    q.json = true;
    return request(q, function(err, response, body) {
      if (err) {
        return q.error(err, response.statusCode, response.getHeader, q);
      } else {
        return q.success(body, response.statusCode, response.getHeader, q);
      }
    });
  }
};

wrappToErrbackForm = function(fhir, fn) {
  return function(opt, cb) {
    opt = merge(true, opt, {
      success: function(res) {
        return cb(null, res);
      },
      error: function(err) {
        return cb(err, null);
      }
    });
    return fhir[fn](opt);
  };
};

module.exports = function(config) {
  var defaultMiddlewares, fhir, middlewares, ret;
  defaultMiddlewares = {
    http: [auth],
    search: [searchByPatient]
  };
  middlewares = utils.mergeLists(config.middlewares, defaultMiddlewares);
  config = merge(true, config, {
    middlewares: middlewares
  });
  fhir = mkFhir(config, adapter);
  ret = ["search", "conformance", "document", "profile", "transaction", "history", "create", "read", "update", "delete", "vread", "resolve"].reduce((function(acc, v) {
    acc[v] = wrappToErrbackForm(fhir, v);
    return acc;
  }), {});
  ret.resolveSync = fhir.resolveSync;
  return ret;
};
